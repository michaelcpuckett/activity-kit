/// <reference types="node" />
import { ActivityTypes, OrArray, TransitiveActivityTypes, IntransitiveActivityTypes } from '../util';
import { CoreObjectProperties, EntityReference } from '../Core';
import { BaseEntity } from '../Core/Entity';
export type AnyActivityType = (typeof ActivityTypes)[keyof typeof ActivityTypes];
export type AnyTransitiveActivityType = (typeof TransitiveActivityTypes)[keyof typeof TransitiveActivityTypes];
export type AnyIntransitiveActivityType = (typeof IntransitiveActivityTypes)[keyof typeof IntransitiveActivityTypes];
export type ActivityProperties = {
    actor: OrArray<EntityReference>;
    object?: OrArray<EntityReference>;
    target?: OrArray<EntityReference>;
    result?: OrArray<EntityReference>;
    origin?: OrArray<EntityReference>;
    instrument?: OrArray<EntityReference>;
};
type BaseActivity<T extends AnyActivityType> = BaseEntity<T> & CoreObjectProperties & ActivityProperties;
type TransitiveActivityProperties = {
    object: OrArray<EntityReference>;
};
export type TransitiveActivity<T extends AnyTransitiveActivityType> = BaseActivity<T> & TransitiveActivityProperties;
export type IntransitiveActivity<T extends AnyIntransitiveActivityType> = BaseActivity<T>;
export type Accept = TransitiveActivity<typeof ActivityTypes.ACCEPT>;
export type TentativeAccept = TransitiveActivity<typeof ActivityTypes.TENTATIVE_ACCEPT>;
export type Add = TransitiveActivity<typeof ActivityTypes.ADD>;
export type Arrive = IntransitiveActivity<typeof ActivityTypes.ARRIVE>;
export type Create = TransitiveActivity<typeof ActivityTypes.CREATE>;
export type Delete = TransitiveActivity<typeof ActivityTypes.DELETE>;
export type Follow = TransitiveActivity<typeof ActivityTypes.FOLLOW>;
export type Ignore = TransitiveActivity<typeof ActivityTypes.IGNORE>;
export type Join = TransitiveActivity<typeof ActivityTypes.JOIN>;
export type Leave = TransitiveActivity<typeof ActivityTypes.LEAVE>;
export type Like = TransitiveActivity<typeof ActivityTypes.LIKE>;
export type Offer = TransitiveActivity<typeof ActivityTypes.OFFER>;
export type Invite = TransitiveActivity<typeof ActivityTypes.INVITE>;
export type Reject = TransitiveActivity<typeof ActivityTypes.REJECT>;
export type TentativeReject = TransitiveActivity<typeof ActivityTypes.TENTATIVE_REJECT>;
export type Remove = TransitiveActivity<typeof ActivityTypes.REMOVE>;
export type Undo = TransitiveActivity<typeof ActivityTypes.UNDO>;
export type Update = TransitiveActivity<typeof ActivityTypes.UPDATE>;
export type View = TransitiveActivity<typeof ActivityTypes.VIEW>;
export type Listen = TransitiveActivity<typeof ActivityTypes.LISTEN>;
export type Read = TransitiveActivity<typeof ActivityTypes.READ>;
export type Move = TransitiveActivity<typeof ActivityTypes.MOVE>;
export type Travel = IntransitiveActivity<typeof ActivityTypes.TRAVEL>;
export type Announce = TransitiveActivity<typeof ActivityTypes.ANNOUNCE>;
export type Block = TransitiveActivity<typeof ActivityTypes.BLOCK>;
export type Flag = TransitiveActivity<typeof ActivityTypes.FLAG>;
export type Dislike = TransitiveActivity<typeof ActivityTypes.DISLIKE>;
export type Question = IntransitiveActivity<typeof ActivityTypes.QUESTION> & {
    oneOf: OrArray<EntityReference>;
    anyOf: OrArray<EntityReference>;
    closed: EntityReference | Date | boolean;
};
export type Activity = Accept | Follow | Delete | Create | Arrive | Add | Offer | Like | Leave | Ignore | Join | Reject | Invite | TentativeReject | TentativeAccept | View | Update | Undo | Remove | Read | Listen | Move | Travel | Announce | Block | Flag | Dislike | Question;
export type ActivityReference = URL | Activity;
export {};
